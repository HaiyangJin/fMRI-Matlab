function fs_hcp_runlistfile(funcPath, strPattern, taskwc, taskNames)
% fs_hcp_runlistfile(funcPath, strPattern, taskwc, taskNames)
%
% This function reads the run_info.txt generated by fs_hcp_prepro and 
% creates the run list files.
% 
%
% Input:
%    funcPath       <str> path to the functional data folder. Default is
%                    "$FUNCTIONALS_DIR". 
%    strPattern     <str> the string pattern for session names. It
%                    will be used to identify all the sessions. E.g., it
%                    can be 'Face*'. Default is the string returned
%                    from hcp_projname.
%    taskwc         <cell str> wildcard characters used with regexp for 
%                    identifying runs for each task. Its length should be 
%                    the same as tasklist. Default is {'[Ll]oc.', ''}. Only
%                    the last wildcard can be empty where all the rest 
%                    (unidentified) runs will be identified as the last task.
%    taskNames      <cell str> list of task names. Each task name will be
%                    used as the output run file name. Default is {'loc', 
%                    'main'}; the corresponding run list files are 
%                    'run_main.txt' and 'run_loc.txt'. Its length needs to
%                    be the same as taskwc.
%
% Output:
%    run list files in the bold/ folder
%
% Created by Haiyang Jin (2020-01-06)

if ~exist('funcPath', 'var')
    funcPath = getenv('FUNCTIONALS_DIR');
end

if ~exist('strPattern', 'var') || isempty(strPattern)
    strPattern = hcp_projname;
end
[funcPath, sessList] = fs_funcdir(funcPath, [strPattern '*']);

if ~exist('taskwc', 'var') || isempty(taskwc)
    taskwc = {'[Ll]oc.', ''}; % whether it contains loc or Loc
end
if ischar(taskwc); taskwc = {taskwc}; end

if ~exist('taskNames', 'var') || isempty(taskNames)
    taskNames = {'loc', 'main'};
end
if ischar(taskNames); taskNames = {taskNames}; end

% make sure taskwc and tasklist length are the same
assert(length(taskwc)==length(taskNames), ...
    'The length of <taskwc>(%d) and <tasklist>(%d) have to be the same.', ...
    length(taskwc), length(taskNames))

% create run files for each session separately
cellfun(@(x) runlistfile(x, taskwc, taskNames), fullfile(funcPath, sessList, 'bold'), 'uni', false);

end

%% functions
function runlistfile(boldPath, taskwc, taskNames)
% boldPath: path to the bold folder

% load run_info.txt
runInfo = readtable(fullfile(boldPath, 'run_info.txt'), 'Delimiter', ',',...
    'Format','%s%s');

% identify taskwc strings
tmpmatch = cellfun(@(x) regexp(runInfo.RunName, x), taskwc, 'uni', false);
% whether the taskwc strings are found
istaskruns = ~cellfun(@isempty, horzcat(tmpmatch{:}));

if isempty(taskwc{end})
    % if the last wildcard is empty, all unidentified runs are used for the
    % last task
    istaskruns(:, end) = ~sum(istaskruns, 2);
end

if ~all(sum(istaskruns, 2))
    warning('\nThe following runs are not identified for any task: %s', ...
        sprintf('\n%s', runInfo.RunName{~sum(istaskruns, 2)}));
end

% make run list files
arrayfun(@(x) mkrunlistfile(boldPath, taskNames{x}, runInfo(istaskruns(:,x),:)), ...
    1:length(taskwc), 'uni', false);

end

function mkrunlistfile(boldPath, taskStr, taskRunInfo) 
% taskStr is from taskNames

% create run list files for each run separately
arrayfun(@(x,y) fm_mkfile(fullfile(boldPath, ['run_' taskStr num2str(x) '.txt']),...
    y), 1:size(taskRunInfo,1), taskRunInfo.RunCode', 'uni', false);

% create run list file for all runs together
fm_mkfile(fullfile(boldPath, ['run_' taskStr '.txt']), taskRunInfo.RunCode);

end
